generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
    // output removed - use default location for Vercel compatibility
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String            @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             String?           @default("Coach")
  license          String?
  organization     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  auditEvents      AuditEvent[]
  clientProfiles   ClientProfile[]
  coachingNotes    CoachingNote[]
  coachingSessions CoachingSession[]
  sessions         Session[]
  sessionNotes     SessionNote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  token   String   @unique
  email   String
  expires DateTime
  used    Boolean  @default(false)
}

model Organization {
  id              String       @id @default(cuid())
  name            String
  slug            String       @unique
  description     String?
  retentionPolicy Int?         @default(2555)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  auditEvents     AuditEvent[]
  engagements     Engagement[]
}

model ClientProfile {
  id                String             @id @default(cuid())
  userId            String
  firstName         String
  lastName          String
  email             String?
  phone             String?
  role              String?
  ageRange          String?
  aspirations       String?
  context           Json?
  pseudonym         String?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  assessmentImports AssessmentImport[]
  user              User               @relation(fields: [userId], references: [id])
  coachingNotes     CoachingNote[]
  coachingSessions  CoachingSession[]
  engagements       Engagement[]
  schemaResolutions SchemaResolution[]

  @@index([userId])
}

model Engagement {
  id               String             @id @default(cuid())
  orgId            String?
  clientId         String
  phase            String             @default("INTAKE")
  startedAt        DateTime           @default(now())
  endedAt          DateTime?
  description      String?
  imports          AssessmentImport[]
  events           AuditEvent[]
  coachingNotes    CoachingNote[]
  coachingSessions CoachingSession[]
  client           ClientProfile      @relation(fields: [clientId], references: [id])
  organization     Organization?      @relation(fields: [orgId], references: [id])
  plans            Plan[]
  notes            SessionNote[]

  @@index([clientId])
  @@index([orgId])
}

model AssessmentImport {
  id              String           @id @default(cuid())
  engagementId    String?
  clientId        String
  respondentId    String
  assessmentId    String
  schemaVersion   String
  analysisVersion String
  completedAt     DateTime
  objectKey       String
  checksumSha256  String
  status          String           @default("VALIDATED")
  metadata        Json?
  createdAt       DateTime         @default(now())
  client          ClientProfile    @relation(fields: [clientId], references: [id])
  engagement      Engagement?      @relation(fields: [engagementId], references: [id])
  results         ComputedResult[]

  @@unique([respondentId, assessmentId, completedAt])
  @@index([clientId])
  @@index([engagementId])
}

model ComputedResult {
  id                 String           @id @default(cuid())
  assessmentImportId String
  engineVersion      String
  mappingVersion     String
  schemaScoresJson   Json
  domainScoresJson   Json
  modeScoresJson     Json
  riskFlagsJson      Json
  computedAt         DateTime         @default(now())
  import             AssessmentImport @relation(fields: [assessmentImportId], references: [id], onDelete: Cascade)

  @@index([assessmentImportId])
}

model Plan {
  id            String      @id @default(cuid())
  engagementId  String?
  clientId      String?
  title         String
  description   String?
  version       Int         @default(1)
  status        String      @default("DRAFT")
  focusAreas    Json?
  interventions Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  engagement    Engagement? @relation(fields: [engagementId], references: [id])
  items         PlanItem[]

  @@index([engagementId])
  @@index([clientId])
}

model PlanItem {
  id          String    @id @default(cuid())
  planId      String
  title       String
  description String?
  dueDate     DateTime?
  status      String    @default("PENDING")
  priority    String    @default("MEDIUM")
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  plan        Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId])
}

model SessionNote {
  id           String      @id @default(cuid())
  engagementId String?
  clientId     String?
  userId       String
  title        String?
  content      String
  sessionDate  DateTime    @default(now())
  type         String      @default("SESSION")
  isPrivate    Boolean     @default(false)
  tags         String      @default("")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  engagement   Engagement? @relation(fields: [engagementId], references: [id])
  user         User        @relation(fields: [userId], references: [id])

  @@index([engagementId])
  @@index([clientId])
  @@index([userId])
}

model MappingVersion {
  id            String   @id @default(cuid())
  name          String
  version       String
  tablesBlobKey String
  description   String?
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())

  @@unique([name, version])
}

model AuditEvent {
  id           String        @id @default(cuid())
  orgId        String?
  engagementId String?
  actorId      String?
  action       String
  objectType   String
  objectId     String
  timestamp    DateTime      @default(now())
  contextJson  Json?
  prevHash     String?
  currHash     String?
  ipAddress    String?
  userAgent    String?
  actor        User?         @relation(fields: [actorId], references: [id])
  engagement   Engagement?   @relation(fields: [engagementId], references: [id])
  organization Organization? @relation(fields: [orgId], references: [id])

  @@index([orgId])
  @@index([engagementId])
  @@index([actorId])
  @@index([action])
  @@index([timestamp])
}

model SchemaPackVersion {
  id                String             @id @default(cuid())
  version           String             @unique
  description       String?
  schemaPackJson    Json
  buildHash         String
  isActive          Boolean            @default(false)
  createdAt         DateTime           @default(now())
  schemaResolutions SchemaResolution[]

  @@index([isActive])
}

model SchemaResolution {
  id                  String            @id @default(cuid())
  clientId            String
  schemaPackVersionId String
  primarySchemaId     String
  secondarySchemaId   String?
  confidenceScore     Float?
  resolutionMethod    String            @default("MANUAL")
  metadata            Json?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  client              ClientProfile     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  schemaPackVersion   SchemaPackVersion @relation(fields: [schemaPackVersionId], references: [id])

  @@unique([clientId, schemaPackVersionId])
  @@index([clientId])
  @@index([primarySchemaId])
  @@index([secondarySchemaId])
}

model CoachingNote {
  id           String        @id @default(cuid())
  clientId     String
  userId       String
  engagementId String?
  framework    String
  section      String
  subSection   String?
  content      String
  order        Int           @default(0)
  isArchived   Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  client       ClientProfile @relation(fields: [clientId], references: [id], onDelete: Cascade)
  engagement   Engagement?   @relation(fields: [engagementId], references: [id])
  user         User          @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([userId])
  @@index([framework])
  @@index([section])
  @@index([engagementId])
}

model CoachingSession {
  id           String        @id @default(cuid())
  clientId     String
  userId       String
  engagementId String?
  title        String?
  scheduledAt  DateTime
  duration     Int?
  status       String        @default("SCHEDULED")
  notes        String?
  meetingLink  String?
  location     String?
  remindAt     DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  client       ClientProfile @relation(fields: [clientId], references: [id], onDelete: Cascade)
  engagement   Engagement?   @relation(fields: [engagementId], references: [id])
  user         User          @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([userId])
  @@index([scheduledAt])
  @@index([status])
  @@index([engagementId])
}

model Mode {
  id             String   @id @default(cuid())
  modeId         String   @unique
  name           String
  type           String
  linkedSchemas  String[] @default([])
  copingStrategy String
  category       String
  isAdaptive     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([category])
  @@index([type])
}
